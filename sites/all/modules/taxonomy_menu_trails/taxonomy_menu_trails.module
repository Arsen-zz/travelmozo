<?php

/**
 * @file
 * Changes menu trail of current entity to its term's menu item.
 *
 * @author Dmitriy.trt      <http://drupal.org/user/329125>
 */

/**
 * Gets settings for specified entity type and bundle name.
 * 
 * @param string $entity_type
 * @param string $bundle
 * @param boolean $load_default
 *   Should function populate settings with default values if there were no
 *   settings saved yet.
 * @return array
 *   Numeric-indexed array with:
 *   - settings for entity type and bundle
 *   - variable name for settings
 *   - does variable already exists.
 */
function _taxonomy_menu_trails_get_settings($entity_type, $bundle, $load_default = TRUE) {
  $var_name = 'taxonomy_menu_trails_' . $entity_type . '_' . $bundle;
  $settings = variable_get($var_name);
  $var_exists = !empty($settings);
  if (empty($settings) && $load_default) {
    $settings = _taxonomy_menu_trails_defaults();
  }
  return array($settings, $var_name, $var_exists);
}

/**
 * Returns default Taxonomy Menu Trails settings for bundle
 *
 * @return array
 */
function _taxonomy_menu_trails_defaults() {
  return array(
    'selection_method' => 'first',
    'only_without_menu' => FALSE,
    'tm_integration' => module_exists('taxonomy_menu'),
    'instances' => array(),
  );
}

/**
 * Implements hook_init().
 */
function taxonomy_menu_trails_init() {
  switch (arg(0)) {
    case 'node':
      if (is_numeric(arg(1))) {
        $entity_type = 'node';
        $entity_path = 'node/' . arg(1);
        $entity = node_load(arg(1));
      }
      break;
    //TODO other entity types support
  }

  if (!empty($entity)) {
    // TODO check for active trail cache existence and process only if there is
    // no cache data for current path and make sure this behavior will work
    // for Menu Block
    list( , , $bundle) = entity_extract_ids($entity_type, $entity);
    list($settings) = _taxonomy_menu_trails_get_settings($entity_type, $bundle, FALSE);
  
    if (!empty($settings['instances'])) {
      if ($settings['only_without_menu']) {
        $has_own_menu = db_query('SELECT COUNT(*) FROM {menu_links} WHERE link_path = :path AND hidden = 0', array(':path' => $entity_path))->fetchField();
      }
      if (!$settings['only_without_menu'] || !$has_own_menu) {
        $has_terms = FALSE;
        //TODO figure out: maybe we have to choose language in term reference fields
        foreach ($settings['instances'] as $field) {
          if (!empty($entity->$field)) {
            $has_terms = TRUE;
            break;
          }
        }
        if ($has_terms) {
          module_load_include('inc', 'taxonomy_menu_trails');
          _taxonomy_menu_trails_process($entity, $settings);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form.
 */
function taxonomy_menu_trails_form_field_ui_field_edit_form_alter(&$form, &$state) {
  if ($form['#instance']['entity_type'] == 'node' && $form['#field']['type'] == 'taxonomy_term_reference') {
    form_load_include($state, 'admin.inc', 'taxonomy_menu_trails');
    _taxonomy_menu_trails_alter_field_form($form);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function taxonomy_menu_trails_form_node_type_form_alter(&$form, &$state) {
  form_load_include($state, 'admin.inc', 'taxonomy_menu_trails');
  _taxonomy_menu_trails_alter_bundle_form($form, 'node', $form['#node_type']);
  $form['taxonomy_menu_trails']['#group'] = 'additional_settings';
  $form['taxonomy_menu_trails']['#attached'] = array(
   'js' => array(drupal_get_path('module', 'taxonomy_menu_trails') . '/js/node-type-form.js'),
  );
}

/**
 * Implements hook_field_delete_instance().
 */
function taxonomy_menu_trails_field_delete_instance($instance) {
  $field_name = $instance['field_name'];
  $info = field_info_field($field_name);
  if ($info['type'] == 'taxonomy_term_reference') {
    switch ($instance['entity_type']) {
      case 'node':
        module_load_include('admin.inc', 'taxonomy_menu_trails');
        _taxonomy_menu_trails_delete_instance($instance);
        break;
      //TODO other entity types support
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_overview_form.
 */
function taxonomy_menu_trails_form_field_ui_field_overview_form_alter(&$form, &$state) {
  switch ($form['#entity_type']) {
    case 'node':
      form_load_include($state, 'admin.inc', 'taxonomy_menu_trails');
      _taxonomy_menu_trails_alter_overview_form($form);
      break;
    //TODO other entity types support
  }
}

/**
 * Implements hook_entity_insert().
 */
function taxonomy_menu_trails_entity_insert($entity, $type) {
  taxonomy_menu_trails_entity_update($entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function taxonomy_menu_trails_entity_update($entity, $type) {
  switch ($type) {
    case 'node':
      //TODO replace with specific cache entries deleting
      menu_cache_clear_all();
      break;
    //TODO other entity types support
  }
}
